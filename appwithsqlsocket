print("=============  ___ ____     ____                  ____            _           _    ============= ")
print("============= |_ _|  _ \   / ___|__ _ _ __ ___   |  _ \ _ __ ___ (_) ___  ___| |_  ============= ")
print("=============  | || | | | | |   / _` | '_ ` _ \  | |_) | '__/ _ \| |/ _ \/ __| __| ============= ")
print("=============  | || |_| | | |__| (_| | | | | | | |  __/| | | (_) | |  __/ (__| |_  ============= ")
print("============= |___|____/   \____\__,_|_| |_| |_| |_|   |_|  \___// |\___|\___|\__| ============= ")
print("=============                                                   |__/               ============= ")             
from flask import Flask, render_template, Response, jsonify, request, redirect, url_for, session, flash
import cv2
import dlib
import numpy as np
import os
from dotenv import load_dotenv
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from datetime import timedelta
from classes.cam_init import CamInit
from classes.framebg import FrameBG
from classes.website_users import User, UserValidate, Admin
from classes.sql_data import DataEdit
from config import AppState
State = AppState()
print("got through imports")
# ngrok http http://localhost:5000


app = Flask(__name__)
load_dotenv()
app.secret_key = os.getenv("SECRET_KEY")
app.permanent_session_lifetime = timedelta(minutes=30)

face_detector = dlib.get_frontal_face_detector()
face_recognition_model = dlib.face_recognition_model_v1("/home/jonahrpi/Desktop/idcamproject/dlib_face_recognition_resnet_model_v1.dat")
shape_predictor = dlib.shape_predictor("/home/jonahrpi/Desktop/idcamproject/shape_predictor_68_face_landmarks.dat")

print("Got through dlib recognition model")

limiter = Limiter(get_remote_address,app=app)
@app.route('/', methods=['GET', 'POST'])
@limiter.limit("5 per minute")  # Limit login attempts
def login():
    if 'loggedin' in session:
        session.clear()
    if request.method == 'POST' and 'id' in request.form and 'password' in request.form:
        user1 = UserValidate.validate_login(request.form["id"], request.form["password"])
        if user1:
            user1.makesession()
            return redirect("/main_page")
        else:
            flash("Invalid ID or password", "error")
    return render_template("login.html")

# def login():
#     if 'loggedin' in session:
#         session.clear()
#     if request.method == 'POST' and 'id' in request.form and 'password' in request.form:
#         account = User.login_check()
#         if account:
#             # Create session data, we can access this data in other routes
#             session['loggedin'] = True
#             session['id'] = account['id']  # Use the key 'id' from the dictionary
#             session['name'] = account['name']  # Use the key 'name' from the dictionary
#             session['admin'] = account['admin']  # Use the key 'admin' from the dictionary
#            # session['id'] = account['id']
#             # Redirect to home page
#             return redirect('/main_page')
#         else:
#             flash('Incorrect Username Or Password!', 'error')
#             print("Flashing message: Incorrect Username Or Password!")
#     return render_template('login.html')


@app.errorhandler(429)
def ratelimit_exceeded(e):
    flash('Over 5 incorect atempts! Now you must wait a minute', 'error')
    return render_template('login.html') 

@app.route('/main_page')
def users():
    if 'loggedin' not in session:
        return redirect('/')
    State.get_instance().which_page = "main"
    return render_template(
        'index.html',
        current_mode=State.get_instance().current_mode,
        tess_smg=State.get_instance().tess_smg,
        attendance_mode=State.get_instance().attendance_mode,
        hoob=State.get_instance().known_face_labels[0] if State.get_instance().known_face_labels else "No faces"
    )

@app.route("/switch_mode/<mode>")
def switch_mode(mode):
    CamInit.reset_state()
    State.get_instance().current_mode = mode
    return render_template(
        'index.html',
        current_mode=State.get_instance().current_mode,
        tess_smg=State.get_instance().tess_smg,
        attendance_mode=State.get_instance().attendance_mode
    )

@app.route("/video_feed/<mode>")
def video_feed(mode):
    #response- send the follwing to client, mimetype- type of message
    #multipart/x-mixed-replace;- type of mime to send one piece of data at a time where one piece of data replaces the next so it looks like a video
    #boundary=frame- comes from the --frame from above it shows where each section of data ends
    if mode=="regular":
        return Response(FrameBG.generate_regular_frames(), mimetype="multipart/x-mixed-replace; boundary=frame")
    return Response(FrameBG.generate_frames(mode), mimetype="multipart/x-mixed-replace; boundary=frame")

@app.route("/remove_face", methods=["POST"])
def remove_face():
    print("in remove face func2")
    namer = request.form.get("name")
    if not namer:
        return "Name is required", 400
    DataEdit.remove_face_from_database(namer)
    flash('Face Removed', 'error')
    return render_template(
        'index.html',
        current_mode=State.get_instance().current_mode,
        tess_smg=State.get_instance().tess_smg,
        attendance_mode=State.get_instance().attendance_mode
    )


@app.route('/add_student', methods=['GET', 'POST'])
def add_student():
    studentname = request.form.get("studentname")
    studentid = request.form.get("studentid")
    student_class_id = request.form.get("classid")
    print("student add called")
    if not studentname or not studentid:
        return "Name is required", 400
    DataEdit.set_student_to_database(studentname, studentid, student_class_id)
    DataEdit.make_lists()
    flash("Student added successfully!", "success")
    return redirect('/face_lists')

# @app.route('/add_studentface', methods=['GET', 'POST'])
# def add_studentface():
#     studentname = request.form.get("studentname")
#     studentid = request.form.get("studentid")
#     student_class_id = request.form.get("classid")
#     print("student add called")
#     if not studentname or not studentid:
#         flash('Student name or Id not there!', 'error')
#         return redirect('/main_page')

#     state = State.get_instance()
#     with state.lock:
#         if state.global_frame is None:
#             flash('No frame captured!', 'error')
#             return redirect('/main_page')
#         frame = state.global_frame.copy()

#     rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#     faces = face_detector(rgb_frame, 0)

#     if len(faces) == 0:
#         flash('No face detected!', 'error')
#         return redirect('/main_page')

#     face = faces[0]
#     x, y, w, h = face.left(), face.top(), face.width(), face.height()
#     face_image = frame[y:y+h, x:x+w]
#     shape = shape_predictor(rgb_frame, face)
#     face_encoding = np.array(face_recognition_model.compute_face_descriptor(rgb_frame, shape))

#     DataEdit.add_fullperson_to_database(face_image, studentname, studentid, student_class_id)

#     # Update in-memory known faces
#     state.known_face_encodings.append(face_encoding)
#     state.known_face_labels.append(studentname)
#     state.known_class_of_face.append(student_class_id)
#     state.known_face_id.append(studentid)

#     DataEdit.make_lists()
#     flash("Student added successfully!", "success")
#     return redirect('/main_page')

@app.route('/add_studentface', methods=['GET', 'POST'])
def add_studentface():
    studentname = request.form.get("studentname")
    studentid = request.form.get("studentid")
    student_class_id = request.form.get("classid")
    
    print(f"Debug: studentname={studentname}, studentid={studentid}, classid={student_class_id}")
    print(32895488)
    if not studentname or not studentid:
        flash('Student name or Id not there!', 'error')
        return redirect('/main_page')

    state = State.get_instance()
    with state.lock:
        if state.global_frame is None:
            flash('No frame captured!', 'error')
            return redirect('/main_page')
        frame = state.global_frame.copy()

    print("Debug: Frame captured and copied.")

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    faces = face_detector(rgb_frame, 0)
    
    print(f"Debug: Faces detected: {len(faces)}")

    if len(faces) == 0:
        flash('No face detected!', 'error')
        return redirect('/main_page')

    face = faces[0]
    x, y, w, h = face.left(), face.top(), face.width(), face.height()
    face_image = frame[y:y+h, x:x+w]
    shape = shape_predictor(rgb_frame, face)
    face_encoding = np.array(face_recognition_model.compute_face_descriptor(rgb_frame, shape))

    print("Debug: Calling add_fullperson_to_database function.")
    DataEdit.add_fullperson_to_database(face_image, studentname, studentid, student_class_id)

    # Update in-memory known faces
    print("Debug: Updating in-memory known faces.")
    state.known_face_encodings.append(face_encoding)
    state.known_face_labels.append(studentname)
    state.known_class_of_face.append(student_class_id)
    state.known_face_id.append(studentid)

    DataEdit.make_lists()
    # flash("Student added successfully!", "success")
    return redirect('/main_page')


@app.route("/add_face", methods=["POST"])
def add_face():
    name = request.form.get("name")
    if not name:
        return "Name is required", 400

    state = State.get_instance()
    with state.lock:
        if state.global_frame is None:
            return "No frame captured", 400
        frame = state.global_frame.copy()

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    faces = face_detector(rgb_frame, 0)

    if len(faces) == 0:
        return "No face detected", 400

    face = faces[0]
    x, y, w, h = face.left(), face.top(), face.width(), face.height()
    face_image = frame[y:y+h, x:x+w]
    shape = shape_predictor(rgb_frame, face)
    face_encoding = np.array(face_recognition_model.compute_face_descriptor(rgb_frame, shape))

    DataEdit.add_face_to_database(face_image, name)

    # Update in-memory known faces
    state.known_face_encodings.append(face_encoding)
    state.known_face_labels.append(name)
    state.known_class_of_face.append(0)
    state.known_face_id.append(0)

    flash('Added Face', 'error')
    return render_template(
        'index.html',
        current_mode=state.current_mode,
        tess_smg=state.tess_smg,
        attendance_mode=state.attendance_mode
    )


@app.route('/admin_page', methods=['GET', 'POST'])
def admin_page():
    if 'loggedin' not in session:
        return redirect('/')
    
    user2 = UserValidate.check_in_db(session["id"])
    admin = Admin(user2.id, user2.name, user2.hashed_password, user2.is_admin)
    if request.method == 'POST' and 'id' in request.form and 'password' in request.form and 'name' in request.form:
        if len(request.form['password']) < 8:
            flash('Password must be at least 8 character !', 'error')
            print("Flashing message: Password must be at least 8 character !")
            return redirect('/admin_page')
        else:
            adduser = request.form
            answer = admin.insert_user(adduser['id'], adduser['name'], adduser.get('admin', 0), adduser['password'])
            if answer == "notadmin":
                flash('User is not an admin!', 'error')
                return redirect("/main_page")
            elif answer == "userexists":
                flash("User ID already exists. Please choose a different ID.", "error")
            elif answer == "useradded":
                flash("User Added Sucssesfully", "error")
            else:
                flash("Unknown error", "error")
        return redirect('/admin_page')


    if request.method == 'POST' and 'id_remove' in request.form:
        answer = admin.remove_user(request.form['id_remove'])
        if answer == "notadmin":
            flash('User is not an admin!', 'error')
            return redirect("/main_page")
        elif answer == "userremoved":
            flash("User Removed Sucssesfully", "error")
        else:
            flash("Unknown error", "error")
        return redirect('/admin_page')


    state = State.get_instance()
    state.which_page = "admin"
    userDetails = Admin.all_users()
    return render_template('admin_page.html', userDetails=userDetails)

@app.route('/face_lists')
def face_lists():
    if 'loggedin' not in session:
        return redirect('/')
    State.get_instance().which_page = "face_lists"
    return render_template('face_groups.html')

@app.route('/attendance')
def attendance():
    print("attendance works")
    if 'loggedin' not in session:
        return redirect('/')

    state = State.get_instance()
    state.attendance_mode = True
    print(f"Route '/attendance' was called: {request.method} - {request.url}")
    print("goes through here")

    return render_template(
        'index.html',
        current_mode=state.current_mode,
        tess_smg=state.tess_smg,
        attendance_mode=state.attendance_mode
    )


@app.route('/add_grade', methods=['GET', 'POST'])
def add_grade():
    if 'loggedin' not in session:
        return redirect('/')
    global grade_names_list
    gname = request.form.get("gradename")
    if not gname:
        return "Name is required", 400
    DataEdit.set_grade_to_database(gname)
    DataEdit.make_lists()

    return redirect('/face_lists')
@app.route('/remove_grade', methods=['GET', 'POST'])
def remove_grade():
    if 'loggedin' not in session:
        return redirect('/')
    global grade_names_list
    gname = request.form.get("gradename")
    if not gname:
        return "Name is required", 400
    DataEdit.remove_grade_from_database(gname)
    DataEdit.make_lists()

    return redirect('/face_lists')

@app.route('/add_class', methods=['GET', 'POST'])
def add_class():
    if 'loggedin' not in session:
        return redirect('/')
    cname = request.form.get("classname")
    gradeid= request.form.get("gradesection")
    if not cname:
        return "Name is required", 400
    DataEdit.set_class_to_database(cname, gradeid)
    DataEdit.make_lists()
    return redirect('/face_lists')

@app.route('/remove_class', methods=['GET', 'POST'])
def remove_class():
    if 'loggedin' not in session:
        return redirect('/')
    cname = request.form.get("classname")
    gradeid = request.form.get("gradesection")
    if not cname:
        return "Name is required", 400
    DataEdit.remove_class_from_database(cname, gradeid)

    state = State.get_instance()
    print(state.class_names_list, cname)
    print(state.class_grade_id_list, gradeid)

    DataEdit.make_lists()
    return redirect('/face_lists')




@app.route('/remove_student', methods=['GET', 'POST'])
def remove_student():
    if 'loggedin' not in session:
        return redirect('/')
    studentname = None
    studentid = None
    student_class_id = None
    print(f"student remove called")
    wherepage = request.form.get("wherepage")
    studentname = request.form.get("studentname")
    studentid = request.form.get("studentid")
    student_class_id = request.form.get("classid")
    if not studentname and not studentid:
        return "Name is required", 400
    print(f"student: {studentname, studentid, student_class_id, wherepage}")
    DataEdit.remove_student_from_database(studentname, studentid, student_class_id)
    DataEdit.make_lists()
    # flash("Student removed successfully!", "success")
    if (wherepage=="inmain"):
        return redirect('/main_page')
    return redirect('/face_lists')


@app.route('/logout')
def logout():
    # stop_camera()
    # Clear the session data
    session.pop('loggedin', None)
    session.pop('id', None)
    session.pop('name', None)
    session.pop('admin', None)
    flash('You have been logged out successfully', 'success')
    return redirect('/')

@app.route('/dataupdate')
def api_datapoint():
    import random
    state = State.get_instance()
    random_number = random.randint(1, 100)

    dictionary_to_return = {
        'which_page': state.which_page,
        'random_number': random_number,
        'attendance_mode': state.attendance_mode,
        'identnames': state.identnames,
        'facesdb': state.known_face_labels,
        'grade_names_list': state.grade_names_list,
        'grade_id_list': state.grade_id_list,
        'class_names_list': state.class_names_list,
        'class_grade_id_list': state.class_grade_id_list,
        'students_list': state.students_list,
        'class_id_list': state.class_id_list,
        'known_class_of_face': state.known_class_of_face,
        'identclass': state.identclass,
        'identid': state.identid
    }

    return jsonify(dictionary_to_return)



if __name__ == "__main__":
    # Load known faces and start the application
    DataEdit.load_known_faces_from_database()
    DataEdit.make_lists()
    
    state = State.get_instance()
    print("this known: ", state.known_face_labels)

    app.run(host="0.0.0.0", port=5002, threaded=True)

# mysql -u root -p
# CREATE USER 'jonahrpi'@'192.168.195.93' IDENTIFIED BY '0586889675';
# GRANT ALL PRIVILEGES ON camproject.* TO 'jonahrpi'@'192.168.195.93';
# FLUSH PRIVILEGES;
